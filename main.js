!function(){"use strict";class e{constructor(e,t,s){this.name=e.name,this.link=e.link,this._cardSelector=t,this._handleImageClick=s}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._likeButton.classList.toggle("card__like-button_active")})),this._deleteButton.addEventListener("click",(()=>{this._element.remove(),this._element=null})),this._cardImage.addEventListener("click",(()=>{this._handleImageClick(this)}))}generateCard(){return this._element=this._getTemplate(),this._cardImage=this._element.querySelector(".card__image"),this._cardTitle=this._element.querySelector(".card__title"),this._likeButton=this._element.querySelector(".card__like-button"),this._deleteButton=this._element.querySelector(".card__delete-button"),this._cardImage.src=this.link,this._cardImage.alt=this.name,this._cardTitle.textContent=this.name,this._setEventListeners(),this._element}}class t{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._errorClassVisible=e.errorClassVisible,this._form=t,this._inputs=Array.from(this._form.querySelectorAll(this._inputSelector)),this._button=this._form.querySelector(this._submitButtonSelector)}_showError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.innerText=e.validationMessage,t.classList.add(this._errorClassVisible)}_hideError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.innerText="",t.classList.remove(this._errorClassVisible)}_checkInputValidity(e){return!!e.validity.valid}disableButton(){this._button.disabled=!0,this._button.classList.add(this._inactiveButtonClass)}_enableButton(){this._button.disabled=!1,this._button.classList.remove(this._inactiveButtonClass)}_setEventListeners(){this.disableButton(),this._inputs.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e)?this._hideError(e):this._showError(e),this._inputs.every((e=>this._checkInputValidity(e)))?this._enableButton():this.disableButton()}))}),this)}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()}),this),this._setEventListeners()}resetValidation(){this._inputs.forEach((e=>this._hideError(e))),this.disableButton()}}class s{constructor(e){this._bindHandler=e=>{this._handleEscButton(e)},this._popupElement=document.querySelector(e),this._closeButton=this._popupElement.querySelector(".modal__close")}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._bindHandler)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._bindHandler)}_handleEscButton(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popupElement.addEventListener("click",(e=>{e.target!==this._popupElement&&e.target!==this._closeButton||this.close()}),this)}}class r extends s{constructor(e,t){super(e),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t}_getInputValues(){const e=Array.from(this._popupForm.querySelectorAll("input")),t={};return e.forEach((e=>{t[e.name]=e.value})),t}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),this._popupForm.reset()}))}}const n={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__save-button",inactiveButtonClass:"modal__save-button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error",errorClassVisible:"modal__error_visible"},i=document.querySelector("#profile-edit-button"),o=document.forms["profile-modal-form"],a=document.querySelector("[name='name']"),l=document.querySelector("[name='description']"),c=document.forms["card-add-modal-form"],u=document.querySelector("#card-add-button"),m={};Array.from(document.querySelectorAll(n.formSelector)).forEach((e=>{const s=new t(n,e);m[e.getAttribute("id")]=s,s.enableValidation()}));const d=new class{constructor(e){let{nameSelector:t,aboutSelector:s}=e;this._nameElement=document.querySelector(t),this._aboutElement=document.querySelector(s)}getUserInfo(){return{name:this._nameElement.innerText,about:this._aboutElement.innerText}}setUserInfo(e){this._nameElement.innerText=e.name,this._aboutElement.innerText=e.about}}({nameSelector:"#profile-name",aboutSelector:"#profile-description"}),_=new class{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._containerElement=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._containerElement.prepend(e)}}({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],renderer:e=>{_.addItem(b(e))}},"#cards-list"),h=new r("#profile-edit-modal",(e=>{d.setUserInfo({name:e.name,about:e.description}),h.close()}));h.setEventListeners();const p=new r("#card-add-modal",(e=>{const t={name:e.title,link:e.url};_.addItem(b(t)),p.close(),m[c.id].disableButton()}));p.setEventListeners();const E=new class extends s{constructor(e){super(e),this._image=this._popupElement.querySelector(".modal__image"),this._title=this._popupElement.querySelector(".modal__title")}open(e){this._image.src=e.link,this._image.alt=e.name,this._title.textContent=e.name,super.open()}}("#card-view-modal");function b(t){return new e(t,"#card-template",(e=>E.open(e))).generateCard()}E.setEventListeners(),_.renderItems(),i.addEventListener("click",(()=>{const{name:e,about:t}=d.getUserInfo();a.value=e,l.value=t,m[o.id].resetValidation(),h.open()})),u.addEventListener("click",(()=>{p.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,